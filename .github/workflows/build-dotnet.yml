name: Build .NET SDK

on: [workflow_dispatch, pull_request, push]

jobs:
  run:
    runs-on: "CVM1"
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-cross-riscv64
      env:
        PACKAGESDIR: ${{ github.workspace }}/packages
        DOWNLOADDIR: ${{ github.workspace }}/downloads
        OUTPUTDIR: ${{ github.workspace }}/output
        RUNTIME_VERSION: 8.0.1-servicing.23580.1
        SDK_VERSION: 8.0.101-servicing.23580.21
        ASPNETCORE_VERSION: 8.0.1-servicing.23580.8
        ROOTFS_DIR: /crossrootfs/riscv64
      volumes:
        - ${{ github.workspace }}/output:${{ github.workspace }}/output
        
    steps:
    - name: Network Debugging
      run: |
        #!/bin/bash
        set -ex

        # 1. Check basic internet connectivity
        echo "--- Pinging google.com ---"
        ping -c 3 google.com || true

        # 2. Check connectivity to the Azure DevOps feed URL
        echo "--- Pinging pkgs.dev.azure.com ---"
        ping -c 3 pkgs.dev.azure.com || true

        # 3. Check DNS Resolution for the feed URL
        echo "--- Checking DNS resolution for pkgs.dev.azure.com ---"
        # The 'nslookup' command might not be in the base image. Let's try 'curl'
        # with verbose output to see where it fails.
        curl -v --head https://pkgs.dev.azure.com || true

        # 4. Try to download a small part of the package URL
        # We use a public part of the URL to see if we can even reach the server.
        echo "--- Attempting a curl on the package feed URL ---"
        curl -I --max-time 30 --connect-timeout 10 https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/d1622942-d16f-48e5-bc83-96f4539e7601/nuget/v3/flat2/microsoft.codeanalysis.csharp.workspaces/4.8.0-7.23566.2/microsoft.codeanalysis.csharp.workspaces.4.8.0-7.23566.2.nupkg || true

        # 5. Check all environment variables related to proxies
        echo "--- Checking environment variables for proxies ---"
        env | grep -i proxy || true

        # 6. Check NuGet configuration for feeds and timeouts
        echo "--- Checking effective NuGet configuration ---"
        # The 'dotnet' CLI needs to be available in the path for this to work.
        # This will show you all registered NuGet package sources.
        dotnet nuget list source || true
        # This will clear the local cache, which can sometimes fix issues.
        echo "--- Clearing NuGet cache ---"
        dotnet nuget locals all --clear || true
        
        # 7. Check the /etc/resolv.conf file for DNS configuration
        echo "--- Checking DNS configuration file ---"
        cat /etc/resolv.conf || true
    - name: Clone repositories
      run: |
        rm -rf * # Clean the workspace
        git clone --depth 1 -b v8.0.1 https://github.com/dotnet/runtime
        git clone --depth 1 -b v8.0.1 https://github.com/dotnet/aspnetcore --recurse-submodules
        git clone --depth 1 -b v8.0.101 https://github.com/dotnet/sdk
        git clone --depth 1 -b v8.0.101 https://github.com/dotnet/installer

    - name: Update Node.js
      run: |
       #!/bin/bash
        set -x
        curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --dearmor -o /usr/share/keyrings/kitware-archive-keyring.gpg

        # Add the repository source to a new file, referencing the new keyring file
        echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" > /etc/apt/sources.list.d/kitware.list
        apt-get update
        apt-get install -y crossbuild-essential-riscv64 clang clang-18 libunwind8-dev
        apt-get autoremove -y nodejs
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && apt-get install -y nodejs

    - name: Build runtime
      run: |
        mkdir -p ${PACKAGESDIR}
        mkdir -p ${DOWNLOADDIR}
        mkdir -p ${OUTPUTDIR}

        cd runtime
        ./build.sh --ci -c Release --cross --arch riscv64
        cp artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Host.linux-riscv64.*.nupkg ${PACKAGESDIR}
        cp artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-riscv64.*.nupkg ${PACKAGESDIR}
        mkdir -p ${DOWNLOADDIR}/Runtime/${RUNTIME_VERSION}
        cp artifacts/packages/Release/Shipping/dotnet-runtime-*-linux-riscv64.tar.gz ${DOWNLOADDIR}/Runtime/${RUNTIME_VERSION}
        cp artifacts/packages/Release/Shipping/dotnet-runtime-*-linux-riscv64.tar.gz ${OUTPUTDIR}
        cp artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Host.linux-riscv64.*.nupkg ${OUTPUTDIR}
        cp artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-riscv64.*.nupkg ${OUTPUTDIR}
        cp artifacts/packages/Release/Shipping/runtime.linux-riscv64.Microsoft.NETCore.DotNetHost.*.nupkg ${OUTPUTDIR}
        cp artifacts/packages/Release/Shipping/runtime.linux-riscv64.Microsoft.NETCore.DotNetHostPolicy.*.nupkg ${OUTPUTDIR}
        cp artifacts/packages/Release/Shipping/runtime.linux-riscv64.Microsoft.NETCore.DotNetHostResolver.*.nupkg ${OUTPUTDIR}
        cp artifacts/packages/Release/NonShipping/runtime.linux-riscv64.Microsoft.NETCore.ILAsm.*.nupkg ${OUTPUTDIR}
        cp artifacts/packages/Release/NonShipping/runtime.linux-riscv64.Microsoft.NETCore.ILDAsm.*.nupkg ${OUTPUTDIR}
        cd .. && rm -r runtime

    - name: Build SDK
      run: |
        cd sdk
        ./build.sh --pack --ci -c Release /p:Architecture=riscv64
        mkdir -p ${DOWNLOADDIR}/Sdk/${SDK_VERSION}
        cp artifacts/packages/Release/NonShipping/dotnet-toolset-internal-*.zip ${DOWNLOADDIR}/Sdk/${SDK_VERSION}/dotnet-toolset-internal-${SDK_VERSION}.zip
        cp artifacts/packages/Release/Shipping/Microsoft.DotNet.Common.*.nupkg ${PACKAGESDIR}
        cd .. && rm -r sdk

    - name: Build aspnetcore
      run: |
        cd aspnetcore
        sed -i "s|ppc64le|riscv64|" src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj
        sed -i "s|\$(BaseIntermediateOutputPath)\$(DotNetRuntimeArchiveFileName)|${DOWNLOADDIR}/Runtime/${RUNTIME_VERSION}/dotnet-runtime-8.0.1-linux-riscv64.tar.gz|" src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj
        ./eng/build.sh --pack --ci -c Release -arch riscv64 /p:DotNetAssetRootUrl=file://${DOWNLOADDIR}/

        cp artifacts/packages/Release/Shipping/Microsoft.AspNetCore.App.Runtime.linux-riscv64.*.nupkg ${PACKAGESDIR}
        mkdir -p ${DOWNLOADDIR}/aspnetcore/Runtime/${ASPNETCORE_VERSION}
        cp artifacts/installers/Release/aspnetcore-runtime-*-linux-riscv64.tar.gz ${DOWNLOADDIR}/aspnetcore/Runtime/${ASPNETCORE_VERSION}
        cp artifacts/installers/Release/aspnetcore_base_runtime.version ${DOWNLOADDIR}/aspnetcore/Runtime/${ASPNETCORE_VERSION}
        cp artifacts/packages/Release/Shipping/Microsoft.AspNetCore.App.Runtime.linux-riscv64.*.nupkg ${OUTPUTDIR}
        cp artifacts/packages/Release/Shipping/Microsoft.DotNet.Web.*.nupkg ${PACKAGESDIR}
        cd .. && rm -r aspnetcore

    - name: Build installer
      run: |
        cd installer
        sed -i "s|linux-arm64|linux-riscv64|" src/redist/targets/GenerateBundledVersions.targets
        sed -i "s|linux-arm64|linux-riscv64|" src/SourceBuild/content/eng/bootstrap/buildBootstrapPreviouslySB.csproj
        sed -i s'|ppc64le|riscv64|' Directory.Build.props
        sed -i s'|ppc64le|riscv64|' src/SourceBuild/content/Directory.Build.props
        sed -i s'|ppc64le|riscv64|' src/redist/targets/Crossgen.targets
        sed -i s"|<clear />|<clear />\n<add key='local' value='${PACKAGESDIR}' />|" NuGet.config
        ./build.sh --ci -c Release -a riscv64 /p:HostRid=linux-x64 /p:PublicBaseURL=file://${DOWNLOADDIR}/
        cp artifacts/packages/Release/Shipping/dotnet-sdk-*-linux-riscv64.tar.gz ${OUTPUTDIR}
        cp artifacts/packages/Release/Shipping/dotnet-sdk-*-linux-riscv64.tar.gz.sha512 ${OUTPUTDIR}

    - name: Upload .NET
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-sdk-linux-riscv64
        path: "${{ github.workspace }}/output/dotnet-sdk-*-linux-riscv64.tar.gz*"
    
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ github.workspace }}/output/dotnet-sdk-*.tar.gz*
          ${{ github.workspace }}/packages/*.nupkg